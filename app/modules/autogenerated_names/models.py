# -*- coding: utf-8 -*-
"""
Autogeneratednames database models
--------------------
"""

import enum
import uuid

from app.extensions import HoustonModel, db

AUTOGEN_NAME_PREFIX_MIN_LENGTH = 2
AUTOGEN_NAME_PREFIX_MAX_LENGTH = 10


class AutogeneratedNameType(str, enum.Enum):
    species = 'species'
    region = 'region'
    project = 'project'
    organization = 'organization'


class AutogeneratedName(db.Model, HoustonModel):
    """
    AutogeneratedNames database model.
    """

    guid = db.Column(
        db.GUID, default=uuid.uuid4, primary_key=True
    )  # pylint: disable=invalid-name

    type = db.Column(
        db.Enum(AutogeneratedNameType),
        default=AutogeneratedNameType.species,
        nullable=False,
        index=True,
    )
    prefix = db.Column(db.String(), index=True, nullable=False)
    # taxonomy guid for species
    reference_guid = db.Column(db.GUID, index=True, nullable=True)
    next_value = db.Column(db.Integer, default=0)

    def __repr__(self):
        return (
            '<{class_name}('
            'guid={self.guid}, '
            'type={self.type}, '
            'prefix={self.prefix}, '
            'reference_guid={self.reference_guid}'
            ')>'.format(class_name=self.__class__.__name__, self=self)
        )

    def get_next(self):

        with db.session.begin():
            # keep read/modify/write all within the single db.session to make it atomic WRT the DB
            next_val = str(self.next_value).zfill(4)
            self.next_value += 1
            db.session.merge(self)
        return f'{self.prefix}{next_val}'
