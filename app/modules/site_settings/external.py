# -*- coding: utf-8 -*-
"""
Site Settings interactions with other modules
This is where the knowledge is of the component specific functionality where some site settings needs to be
read/stored/validated
--------------------
"""
import logging

from flask_login import current_user  # NOQA

from app.modules import is_module_enabled
from app.utils import HoustonException

log = logging.getLogger(__name__)  # pylint: disable=invalid-name


class SiteSettingModules(object):
    @classmethod
    def validate_autogen_names(cls, value):
        if is_module_enabled('autogenerated_names'):
            from app.modules.autogenerated_names.models import AutogeneratedName

            return AutogeneratedName.validate_names(value)
        else:
            return []

    @classmethod
    def update_autogen_names(cls, value):
        if is_module_enabled('autogenerated_names'):
            from app.modules.autogenerated_names.models import AutogeneratedName

            AutogeneratedName.set_names_as_rest(value)

    @classmethod
    def validate_social_group_roles(cls, value):
        if is_module_enabled('social_groups'):
            from app.modules.social_groups.models import SocialGroup

            SocialGroup.validate_roles(value)

    @classmethod
    def update_social_group_roles(cls, value):
        if is_module_enabled('social_groups'):
            from app.modules.social_groups.models import SocialGroup

            SocialGroup.site_settings_updated()

    @classmethod
    def validate_relationship_type_roles(cls, value):
        from .schemas import RelationshipTypeSchema

        schema = RelationshipTypeSchema()
        for relationship_object in value.values():
            errors = schema.validate(relationship_object)
            if errors:
                raise HoustonException(log, schema.get_error_message(errors))
