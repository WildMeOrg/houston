version: "3.8"

services:

  db:
    image: postgres:13.4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60
    user: postgres
    volumes:
      - db-pgdata-var:/var/lib/postgresql/data
      # DB initialization scripts
      - .dockerfiles/db/initdb.d/:/docker-entrypoint-initdb.d/
    networks:
      - intranet
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      WBIA_DB_NAME: "${WBIA_DB_NAME}"
      WBIA_DB_USER: "${WBIA_DB_USER}"
      WBIA_DB_PASSWORD: "${WBIA_DB_PASSWORD}"
      WILDBOOK_DB_NAME: "${WILDBOOK_DB_NAME}"
      WILDBOOK_DB_USER: "${WILDBOOK_DB_USER}"
      WILDBOOK_DB_PASSWORD: "${WILDBOOK_DB_PASSWORD}"
      HOUSTON_DB_NAME: "${HOUSTON_DB_NAME}"
      HOUSTON_DB_USER: "${HOUSTON_DB_USER}"
      HOUSTON_DB_PASSWORD: "${HOUSTON_DB_PASSWORD}"

  redis:
    image: redis:latest
    command: ["redis-server", "/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes:
      - redis-var:/data
      - .dockerfiles/redis/redis.conf:/redis.conf
    networks:
      - intranet

  elasticsearch:
    # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.1
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail 127.0.0.1:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60
    # volumes:
    #   - es-var:/usr/share/elasticsearch/data
    networks:
      - intranet
    ports:
      # development exposure, not exposed in production
      - 9200:9200
      - 9300:9300
    environment:
      "discovery.type": single-node

  acm:
    # https://github.com/WildMeOrg/wildbook-ia
    image: wildme/wbia:latest
    command: ["--db-uri", "${WBIA_DB_URI}"]
    depends_on:
      db:
        condition: service_healthy
    # healthcheck:  # WBIA defines it's own health check
    volumes:
      - acm-database-var:/data/db
      - acm-cache-var:/cache
    networks:
      - intranet
    ports:
      # FIXME: exposed for developer verification
      - "82:5000"
    environment:
      WBIA_DB_URI: "${WBIA_DB_URI}"
      HOUSTON_CLIENT_ID: "${HOUSTON_CLIENT_ID}"
      HOUSTON_CLIENT_SECRET: "${HOUSTON_CLIENT_SECRET}"

  edm:
    # See: https://github.com/WildMeOrg/Wildbook/tree/next-gen
    #  - git clone -b next-gen git@github.com:WildMeOrg/Wildbook.git && cd Wildbook
    #  - ./scripts/build.docker.sh
    image: wildme/edm:latest
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8080/dbconnections.jsp"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes:
      - edm-var:/data/wildbook_data_dir
    networks:
      - intranet
    ports:
      # FIXME: exposed for developer verification
      - "81:8080"
    environment:
      DB_USER: "${WILDBOOK_DB_USER}"
      DB_PASSWORD: "${WILDBOOK_DB_PASSWORD}"
      DB_CONNECTION_URL: "${WILDBOOK_DB_CONNECTION_URL}"
      # Admin user created on startup,
      # https://github.com/WildMeOrg/Wildbook/commit/6d65e70e43691f1b281bb76edf151e5c7cdb7403
      ADMIN_EMAIL: "${EDM_AUTHENTICATIONS_USERNAME__DEFAULT}"
      ADMIN_PASSWORD: "${EDM_AUTHENTICATIONS_PASSWORD__DEFAULT}"
      # JAVA_OPTS from old-world wildbook, which gives us 4G heap memory
      JAVA_OPTS: "-Djava.awt.headless=true -XX:+UseConcMarkSweepGC -Xms4096m -Xmx4096m"

  houston:
    # https://github.com/WildMeOrg/houston
    image: wildme/houston:latest
    build: &houston-build
      context: .
      target: main
    command: ["invoke", "app.run", "--host", "0.0.0.0"]
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ['CMD', '/docker-healthcheck.sh']
      interval: 10s
      timeout: 5s
      retries: 60
    volumes: &houston-volumes
      - houston-var:/data
      # These are added for development. Do not mount these in production.
      - .dockerfiles/docker-entrypoint.sh:/docker-entrypoint.sh
      - .dockerfiles/docker-healthcheck.sh:/docker-healthcheck.sh
      - .dockerfiles/docker-entrypoint-init.d.codex:/docker-entrypoint-init.d
      - .dockerfiles/docker-entrypoint-always-init.d:/docker-entrypoint-always-init.d
      # FIXME: pull in development code while working on bringing up the container
      - .:/code
    networks:
      - intranet
      - frontend
    ports:
      # FIXME: exposed for developer verification
      - "83:5000"
    environment: &houston-environment
      HOUSTON_APP_CONTEXT: codex
      # exposed service is 'localhost' using default port 80
      SERVER_NAME: "${SERVER_NAME}"
      PREFERRED_URL_SCHEME: "${PREFERRED_URL_SCHEME}"
      FLASK_ENV: development
      SQLALCHEMY_DATABASE_URI: "${SQLALCHEMY_DATABASE_URI}"
      TEST_DATABASE_URI: "${TEST_DATABASE_URI}"
      EDM_AUTHENTICATIONS_URI__DEFAULT: "${EDM_AUTHENTICATIONS_URI__DEFAULT}"
      EDM_AUTHENTICATIONS_USERNAME__DEFAULT: "${EDM_AUTHENTICATIONS_USERNAME__DEFAULT}"
      EDM_AUTHENTICATIONS_PASSWORD__DEFAULT: "${EDM_AUTHENTICATIONS_PASSWORD__DEFAULT}"
      ACM_AUTHENTICATIONS_URI__DEFAULT: "${ACM_AUTHENTICATIONS_URI__DEFAULT}"
      ELASTICSEARCH_HOSTS: "${ELASTICSEARCH_HOSTS}"
      HOUSTON_URL: "${HOUSTON_URL}"
      REDIS_HOST: redis
      REDIS_PASSWORD: "seekret_development_password"
      GITLAB_PROTO: "${GITLAB_PROTO}"
      GITLAB_HOST: "${GITLAB_HOST}"
      GITLAB_PORT: "${GITLAB_PORT}"
      GITLAB_ADMIN_PASSWORD: "${GITLAB_ADMIN_PASSWORD}"
      GITLAB_REMOTE_URI: "${GITLAB_REMOTE_URI}"
      GITLAB_REMOTE_LOGIN_PAT: "${GITLAB_REMOTE_LOGIN_PAT}"
      GITLAB_NAMESPACE: "${GITLAB_NAMESPACE}"
      GIT_SSH_KEY: "${GIT_SSH_KEY}"
      GIT_PUBLIC_NAME: "${GIT_PUBLIC_NAME}"
      GIT_EMAIL: "${GIT_EMAIL}"
      OAUTH_CLIENT_ID: "${HOUSTON_CLIENT_ID}"
      OAUTH_CLIENT_SECRET: "${HOUSTON_CLIENT_SECRET}"
      OAUTH_USER_EMAIL: "${OAUTH_USER_EMAIL}"
      WILDBOOK_DB_HOST: "${WILDBOOK_DB_HOST}"
      WILDBOOK_DB_NAME: "${WILDBOOK_DB_NAME}"
      WILDBOOK_DB_USER: "${WILDBOOK_DB_USER}"
      WILDBOOK_DB_PASSWORD: "${WILDBOOK_DB_PASSWORD}"
      LOG_WIDTH: ${LOG_WIDTH}

  celery_beat:
    image: wildme/houston:latest
    build: *houston-build
    command: ["celery", "-A", "app.extensions.celery.celery", "beat", "-s", "/data/var/celerybeat-schedule", "-l", "DEBUG"]
    depends_on:
      houston:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.extensions.celery.celery", "status"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes: *houston-volumes
    networks:
      - intranet
    environment: *houston-environment

  celery_worker:
    image: wildme/houston:latest
    build: *houston-build
    command: ["celery", "-A", "app.extensions.celery.celery", "worker", "-l", "DEBUG"]
    depends_on:
      houston:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.extensions.celery.celery", "status"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes: *houston-volumes
    networks:
      - intranet
    environment: *houston-environment

  dev-frontend:
    # this component is intended to only be used in development
    image: node:lts
    working_dir: /code
    entrypoint: "/docker-entrypoint.sh"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:3000/"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes:
      - .dockerfiles/dev-frontend/docker-entrypoint.sh:/docker-entrypoint.sh
      - ./_frontend.codex:/code
    networks:
      - intranet
    environment:
      # See port served by 'www' component (i.e. the reverse proxy)
      HOST: "0.0.0.0"
      PORT: "84"

  localhost:
    image: nginx:latest
    depends_on:
      edm:
        condition: service_healthy
      # acm:
      #   condition: service_healthy
      houston:
        condition: service_healthy
      dev-frontend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 60
    volumes:
      - .dockerfiles/www/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - intranet
      - frontend
    ports:
      - "80:80"
      # BBB deprecated in favor or port 80, remains for backward compat
      - "84:80"

networks:
  intranet:
  frontend:

volumes:
  db-pgdata-var:
  edm-var:
  # es-var:
  redis-var:
  acm-database-var:
  acm-cache-var:
  houston-var:
