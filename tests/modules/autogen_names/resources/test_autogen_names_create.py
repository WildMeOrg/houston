# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring

import pytest

import tests.modules.autogen_names.resources.utils as auto_name_utils
from tests.utils import module_unavailable


@pytest.mark.skipif(
    module_unavailable('autogenerated_names'),
    reason='Autogenerated names module disabled',
)
def test_create_autogenerated_name(
    flask_app_client,
    researcher_1,
    data_manager_1,
    researcher_2,
    user_manager_user,
    db,
    request,
    test_root,
):

    import tests.modules.individuals.resources.utils as individual_utils

    individual1_uuids = individual_utils.create_individual_and_sighting(
        flask_app_client,
        researcher_1,
        request,
        test_root,
    )
    individual1_id = individual1_uuids['individual']
    individual1_data = individual_utils.read_individual(  # NOQA
        flask_app_client, researcher_1, individual1_id
    ).json

    auto_name_utils.read_all_autogen_names(flask_app_client, data_manager_1)
    auto_name_utils.read_all_autogen_names(flask_app_client, researcher_1)
    data = {'prefix': 'woo', 'type': 'species'}
    auto_name_utils.create_autogen_name(flask_app_client, data_manager_1, data)

    # create another one the same, should fail
    error = 'Autogenerated Name of type:species with prefix:woo already exists'
    auto_name_utils.create_autogen_name(
        flask_app_client, data_manager_1, data, 400, error
    )

    names = auto_name_utils.read_all_autogen_names(flask_app_client, data_manager_1).json
    spec_woo_guids = [
        name['guid']
        for name in names
        if name['type'] == 'species' and name['prefix'] == 'woo'
    ]
    assert len(spec_woo_guids) == 1
    name = auto_name_utils.read_autogen_name(
        flask_app_client, researcher_1, spec_woo_guids[0]
    ).json
    assert name['type'] == 'species'
    assert name['prefix'] == 'woo'
    assert name['next_value'] == 0
    assert name['reference_guid'] is None

    individual2_uuids = individual_utils.create_individual_and_sighting(
        flask_app_client,
        researcher_1,
        request,
        test_root,
    )
    individual2_id = individual2_uuids['individual']  # NOQA
    individual2_data = individual_utils.read_individual(  # NOQA
        flask_app_client, researcher_1, individual1_id
    ).json
